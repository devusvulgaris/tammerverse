/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 /Users/oleg/Own/junction/tammerverse/public/models/robotic-arm.glb --transform --types -D
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
    Cube_part: THREE.Mesh
    Bottom_fastener: THREE.Mesh
    Generator_stand: THREE.Mesh
    Arm_stand: THREE.Mesh
    Bottom_screw: THREE.Mesh
    Stand: THREE.Mesh
    Twisting_fastener: THREE.Mesh
    Twisting_fastener_base: THREE.Mesh
    Twisting_fastener_top: THREE.Mesh
    Mechanism: THREE.Mesh
    Fastening_arm_part: THREE.Mesh
    Genertor_base: THREE.Mesh
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    Cube_part_material: THREE.MeshStandardMaterial
    Bottom_fastener_material: THREE.MeshStandardMaterial
    Generator_stand_material: THREE.MeshStandardMaterial
    Arm_stand_material: THREE.MeshStandardMaterial
    Bottom_screw_material: THREE.MeshStandardMaterial
    Stand_material: THREE.MeshStandardMaterial
    Twisting_fastener_material: THREE.MeshStandardMaterial
    Twisting_fastener_base_material: THREE.MeshStandardMaterial
    Twisting_fastener_top_material: THREE.MeshStandardMaterial
    Mechanism_material: THREE.MeshStandardMaterial
    Fastening_arm_part_material: THREE.MeshStandardMaterial
    Generator_base_material: THREE.MeshStandardMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/robotic-arm-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Cube.geometry} material={materials.Material} />
      <mesh geometry={nodes.Cube_part.geometry} material={materials.Cube_part_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Bottom_fastener.geometry} material={materials.Bottom_fastener_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Generator_stand.geometry} material={materials.Generator_stand_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Arm_stand.geometry} material={materials.Arm_stand_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Bottom_screw.geometry} material={materials.Bottom_screw_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Stand.geometry} material={materials.Stand_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Twisting_fastener.geometry} material={materials.Twisting_fastener_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Twisting_fastener_base.geometry} material={materials.Twisting_fastener_base_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Twisting_fastener_top.geometry} material={materials.Twisting_fastener_top_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Mechanism.geometry} material={materials.Mechanism_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Fastening_arm_part.geometry} material={materials.Fastening_arm_part_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      <mesh geometry={nodes.Genertor_base.geometry} material={materials.Generator_base_material} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}

useGLTF.preload('/robotic-arm-transformed.glb')
